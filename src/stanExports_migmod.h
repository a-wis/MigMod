// Generated by rstantools.  Do not edit by hand.

/*
    MigMod is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MigMod is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MigMod.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_migmod_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 40, column 2 to column 21)",
                                                      " (in 'string', line 41, column 2 to column 21)",
                                                      " (in 'string', line 42, column 2 to column 37)",
                                                      " (in 'string', line 43, column 2 to column 37)",
                                                      " (in 'string', line 44, column 2 to column 23)",
                                                      " (in 'string', line 45, column 2 to column 25)",
                                                      " (in 'string', line 46, column 2 to column 24)",
                                                      " (in 'string', line 47, column 2 to column 28)",
                                                      " (in 'string', line 48, column 2 to column 28)",
                                                      " (in 'string', line 49, column 2 to column 14)",
                                                      " (in 'string', line 50, column 2 to column 31)",
                                                      " (in 'string', line 51, column 2 to column 23)",
                                                      " (in 'string', line 52, column 2 to column 23)",
                                                      " (in 'string', line 53, column 2 to column 21)",
                                                      " (in 'string', line 56, column 2 to column 18)",
                                                      " (in 'string', line 57, column 2 to column 24)",
                                                      " (in 'string', line 58, column 2 to column 24)",
                                                      " (in 'string', line 59, column 2 to column 36)",
                                                      " (in 'string', line 60, column 2 to column 36)",
                                                      " (in 'string', line 61, column 2 to column 31)",
                                                      " (in 'string', line 62, column 2 to column 31)",
                                                      " (in 'string', line 63, column 2 to column 23)",
                                                      " (in 'string', line 64, column 2 to column 23)",
                                                      " (in 'string', line 66, column 2 to column 37)",
                                                      " (in 'string', line 67, column 2 to column 37)",
                                                      " (in 'string', line 68, column 2 to column 32)",
                                                      " (in 'string', line 69, column 2 to column 32)",
                                                      " (in 'string', line 71, column 2 to column 92)",
                                                      " (in 'string', line 74, column 4 to column 91)",
                                                      " (in 'string', line 73, column 29 to line 75, column 3)",
                                                      " (in 'string', line 73, column 2 to line 75, column 3)",
                                                      " (in 'string', line 77, column 22 to column 53)",
                                                      " (in 'string', line 77, column 2 to column 53)",
                                                      " (in 'string', line 78, column 22 to column 53)",
                                                      " (in 'string', line 78, column 2 to column 53)",
                                                      " (in 'string', line 80, column 2 to column 25)",
                                                      " (in 'string', line 81, column 2 to column 25)",
                                                      " (in 'string', line 88, column 2 to column 24)",
                                                      " (in 'string', line 89, column 2 to column 30)",
                                                      " (in 'string', line 90, column 2 to column 30)",
                                                      " (in 'string', line 91, column 2 to column 30)",
                                                      " (in 'string', line 94, column 2 to column 25)",
                                                      " (in 'string', line 95, column 2 to column 33)",
                                                      " (in 'string', line 96, column 2 to column 33)",
                                                      " (in 'string', line 97, column 2 to column 33)",
                                                      " (in 'string', line 98, column 2 to column 33)",
                                                      " (in 'string', line 99, column 2 to column 33)",
                                                      " (in 'string', line 100, column 2 to column 33)",
                                                      " (in 'string', line 101, column 2 to column 31)",
                                                      " (in 'string', line 102, column 2 to column 31)",
                                                      " (in 'string', line 103, column 2 to column 22)",
                                                      " (in 'string', line 104, column 2 to column 22)",
                                                      " (in 'string', line 105, column 2 to column 21)",
                                                      " (in 'string', line 106, column 2 to column 54)",
                                                      " (in 'string', line 107, column 2 to column 54)",
                                                      " (in 'string', line 108, column 2 to column 24)",
                                                      " (in 'string', line 109, column 2 to column 24)",
                                                      " (in 'string', line 11, column 2 to column 21)",
                                                      " (in 'string', line 12, column 2 to column 21)",
                                                      " (in 'string', line 13, column 2 to column 21)",
                                                      " (in 'string', line 14, column 2 to column 22)",
                                                      " (in 'string', line 15, column 2 to column 22)",
                                                      " (in 'string', line 16, column 2 to column 22)",
                                                      " (in 'string', line 17, column 2 to column 22)",
                                                      " (in 'string', line 18, column 2 to column 23)",
                                                      " (in 'string', line 19, column 2 to column 22)",
                                                      " (in 'string', line 20, column 9 to column 15)",
                                                      " (in 'string', line 20, column 2 to column 17)",
                                                      " (in 'string', line 21, column 9 to column 15)",
                                                      " (in 'string', line 21, column 2 to column 17)",
                                                      " (in 'string', line 22, column 13 to column 19)",
                                                      " (in 'string', line 22, column 2 to column 21)",
                                                      " (in 'string', line 23, column 13 to column 19)",
                                                      " (in 'string', line 23, column 2 to column 21)",
                                                      " (in 'string', line 24, column 9 to column 20)",
                                                      " (in 'string', line 24, column 21 to column 28)",
                                                      " (in 'string', line 24, column 2 to column 36)",
                                                      " (in 'string', line 25, column 9 to column 15)",
                                                      " (in 'string', line 25, column 2 to column 24)",
                                                      " (in 'string', line 26, column 9 to column 15)",
                                                      " (in 'string', line 26, column 2 to column 24)",
                                                      " (in 'string', line 27, column 12 to column 18)",
                                                      " (in 'string', line 27, column 2 to column 20)",
                                                      " (in 'string', line 28, column 12 to column 18)",
                                                      " (in 'string', line 28, column 2 to column 20)",
                                                      " (in 'string', line 29, column 19 to column 24)",
                                                      " (in 'string', line 29, column 2 to column 26)",
                                                      " (in 'string', line 31, column 2 to column 17)",
                                                      " (in 'string', line 32, column 2 to column 17)",
                                                      " (in 'string', line 33, column 2 to column 13)",
                                                      " (in 'string', line 34, column 2 to column 13)",
                                                      " (in 'string', line 35, column 2 to column 13)",
                                                      " (in 'string', line 36, column 2 to column 13)",
                                                      " (in 'string', line 40, column 9 to column 15)",
                                                      " (in 'string', line 41, column 9 to column 15)",
                                                      " (in 'string', line 44, column 9 to column 16)",
                                                      " (in 'string', line 51, column 9 to column 15)",
                                                      " (in 'string', line 52, column 9 to column 15)",
                                                      " (in 'string', line 53, column 9 to column 14)",
                                                      " (in 'string', line 56, column 9 to column 14)",
                                                      " (in 'string', line 57, column 9 to column 14)",
                                                      " (in 'string', line 58, column 9 to column 14)",
                                                      " (in 'string', line 59, column 18 to column 24)",
                                                      " (in 'string', line 60, column 18 to column 24)",
                                                      " (in 'string', line 63, column 9 to column 15)",
                                                      " (in 'string', line 64, column 9 to column 15)"};
#include <stan_meta_header.hpp>
class model_migmod final : public model_base_crtp<model_migmod> {
private:
  int N_obs;
  int N_all;
  int N_mis;
  int N_obs1;
  int N_mis1;
  int N_obs2;
  int N_mis2;
  int N_preds;
  int N_corr;
  std::vector<int> z1;
  std::vector<int> z2;
  std::vector<int> z_ind1;
  std::vector<int> z_ind2;
  Eigen::Matrix<double, -1, -1> X_all;
  Eigen::Matrix<double, -1, -1> XL_i;
  Eigen::Matrix<double, -1, -1> XL_e;
  std::vector<int> acc_i;
  std::vector<int> acc_e;
  std::vector<int> corridor_all;
  double hypv_psi0;
  double hypv_psi1;
  std::vector<double> EL;
  std::vector<double> EH;
  std::vector<double> IL;
  std::vector<double> IH;
 
public:
  ~model_migmod() { }
  
  inline std::string model_name() const final { return "model_migmod"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_migmod(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_migmod_namespace::model_migmod";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 58;
      context__.validate_dims("data initialization","N_obs","int",
          context__.to_vec());
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 58;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 58;
      current_statement__ = 58;
      check_greater_or_equal(function__, "N_obs", N_obs, 0);
      current_statement__ = 59;
      context__.validate_dims("data initialization","N_all","int",
          context__.to_vec());
      N_all = std::numeric_limits<int>::min();
      
      current_statement__ = 59;
      N_all = context__.vals_i("N_all")[(1 - 1)];
      current_statement__ = 59;
      current_statement__ = 59;
      check_greater_or_equal(function__, "N_all", N_all, 0);
      current_statement__ = 60;
      context__.validate_dims("data initialization","N_mis","int",
          context__.to_vec());
      N_mis = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      N_mis = context__.vals_i("N_mis")[(1 - 1)];
      current_statement__ = 60;
      current_statement__ = 60;
      check_greater_or_equal(function__, "N_mis", N_mis, 0);
      current_statement__ = 61;
      context__.validate_dims("data initialization","N_obs1","int",
          context__.to_vec());
      N_obs1 = std::numeric_limits<int>::min();
      
      current_statement__ = 61;
      N_obs1 = context__.vals_i("N_obs1")[(1 - 1)];
      current_statement__ = 61;
      current_statement__ = 61;
      check_greater_or_equal(function__, "N_obs1", N_obs1, 0);
      current_statement__ = 62;
      context__.validate_dims("data initialization","N_mis1","int",
          context__.to_vec());
      N_mis1 = std::numeric_limits<int>::min();
      
      current_statement__ = 62;
      N_mis1 = context__.vals_i("N_mis1")[(1 - 1)];
      current_statement__ = 62;
      current_statement__ = 62;
      check_greater_or_equal(function__, "N_mis1", N_mis1, 0);
      current_statement__ = 63;
      context__.validate_dims("data initialization","N_obs2","int",
          context__.to_vec());
      N_obs2 = std::numeric_limits<int>::min();
      
      current_statement__ = 63;
      N_obs2 = context__.vals_i("N_obs2")[(1 - 1)];
      current_statement__ = 63;
      current_statement__ = 63;
      check_greater_or_equal(function__, "N_obs2", N_obs2, 0);
      current_statement__ = 64;
      context__.validate_dims("data initialization","N_mis2","int",
          context__.to_vec());
      N_mis2 = std::numeric_limits<int>::min();
      
      current_statement__ = 64;
      N_mis2 = context__.vals_i("N_mis2")[(1 - 1)];
      current_statement__ = 64;
      current_statement__ = 64;
      check_greater_or_equal(function__, "N_mis2", N_mis2, 0);
      current_statement__ = 65;
      context__.validate_dims("data initialization","N_preds","int",
          context__.to_vec());
      N_preds = std::numeric_limits<int>::min();
      
      current_statement__ = 65;
      N_preds = context__.vals_i("N_preds")[(1 - 1)];
      current_statement__ = 65;
      current_statement__ = 65;
      check_greater_or_equal(function__, "N_preds", N_preds, 0);
      current_statement__ = 66;
      context__.validate_dims("data initialization","N_corr","int",
          context__.to_vec());
      N_corr = std::numeric_limits<int>::min();
      
      current_statement__ = 66;
      N_corr = context__.vals_i("N_corr")[(1 - 1)];
      current_statement__ = 66;
      current_statement__ = 66;
      check_greater_or_equal(function__, "N_corr", N_corr, 0);
      current_statement__ = 67;
      validate_non_negative_index("z1", "N_obs1", N_obs1);
      current_statement__ = 68;
      context__.validate_dims("data initialization","z1","int",
          context__.to_vec(N_obs1));
      z1 = std::vector<int>(N_obs1, std::numeric_limits<int>::min());
      
      current_statement__ = 68;
      assign(z1, nil_index_list(), context__.vals_i("z1"),
        "assigning variable z1");
      current_statement__ = 69;
      validate_non_negative_index("z2", "N_obs2", N_obs2);
      current_statement__ = 70;
      context__.validate_dims("data initialization","z2","int",
          context__.to_vec(N_obs2));
      z2 = std::vector<int>(N_obs2, std::numeric_limits<int>::min());
      
      current_statement__ = 70;
      assign(z2, nil_index_list(), context__.vals_i("z2"),
        "assigning variable z2");
      current_statement__ = 71;
      validate_non_negative_index("z_ind1", "N_obs1", N_obs1);
      current_statement__ = 72;
      context__.validate_dims("data initialization","z_ind1","int",
          context__.to_vec(N_obs1));
      z_ind1 = std::vector<int>(N_obs1, std::numeric_limits<int>::min());
      
      current_statement__ = 72;
      assign(z_ind1, nil_index_list(), context__.vals_i("z_ind1"),
        "assigning variable z_ind1");
      current_statement__ = 73;
      validate_non_negative_index("z_ind2", "N_obs2", N_obs2);
      current_statement__ = 74;
      context__.validate_dims("data initialization","z_ind2","int",
          context__.to_vec(N_obs2));
      z_ind2 = std::vector<int>(N_obs2, std::numeric_limits<int>::min());
      
      current_statement__ = 74;
      assign(z_ind2, nil_index_list(), context__.vals_i("z_ind2"),
        "assigning variable z_ind2");
      current_statement__ = 75;
      validate_non_negative_index("X_all", "N_obs + N_mis", (N_obs + N_mis));
      current_statement__ = 76;
      validate_non_negative_index("X_all", "N_preds", N_preds);
      current_statement__ = 77;
      context__.validate_dims("data initialization","X_all","double",
          context__.to_vec((N_obs + N_mis), N_preds));
      X_all = Eigen::Matrix<double, -1, -1>((N_obs + N_mis), N_preds);
      stan::math::fill(X_all, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_all_flat__;
        current_statement__ = 77;
        assign(X_all_flat__, nil_index_list(), context__.vals_r("X_all"),
          "assigning variable X_all_flat__");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= N_preds; ++sym1__) {
          current_statement__ = 77;
          for (int sym2__ = 1; sym2__ <= (N_obs + N_mis); ++sym2__) {
            current_statement__ = 77;
            assign(X_all,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_all_flat__[(pos__ - 1)], "assigning variable X_all");
            current_statement__ = 77;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 78;
      validate_non_negative_index("XL_i", "N_obs1", N_obs1);
      current_statement__ = 79;
      context__.validate_dims("data initialization","XL_i","double",
          context__.to_vec(N_obs1, 3));
      XL_i = Eigen::Matrix<double, -1, -1>(N_obs1, 3);
      stan::math::fill(XL_i, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> XL_i_flat__;
        current_statement__ = 79;
        assign(XL_i_flat__, nil_index_list(), context__.vals_r("XL_i"),
          "assigning variable XL_i_flat__");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 79;
          for (int sym2__ = 1; sym2__ <= N_obs1; ++sym2__) {
            current_statement__ = 79;
            assign(XL_i,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              XL_i_flat__[(pos__ - 1)], "assigning variable XL_i");
            current_statement__ = 79;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 80;
      validate_non_negative_index("XL_e", "N_obs2", N_obs2);
      current_statement__ = 81;
      context__.validate_dims("data initialization","XL_e","double",
          context__.to_vec(N_obs2, 3));
      XL_e = Eigen::Matrix<double, -1, -1>(N_obs2, 3);
      stan::math::fill(XL_e, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> XL_e_flat__;
        current_statement__ = 81;
        assign(XL_e_flat__, nil_index_list(), context__.vals_r("XL_e"),
          "assigning variable XL_e_flat__");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 81;
          for (int sym2__ = 1; sym2__ <= N_obs2; ++sym2__) {
            current_statement__ = 81;
            assign(XL_e,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              XL_e_flat__[(pos__ - 1)], "assigning variable XL_e");
            current_statement__ = 81;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 82;
      validate_non_negative_index("acc_i", "N_obs1", N_obs1);
      current_statement__ = 83;
      context__.validate_dims("data initialization","acc_i","int",
          context__.to_vec(N_obs1));
      acc_i = std::vector<int>(N_obs1, std::numeric_limits<int>::min());
      
      current_statement__ = 83;
      assign(acc_i, nil_index_list(), context__.vals_i("acc_i"),
        "assigning variable acc_i");
      current_statement__ = 84;
      validate_non_negative_index("acc_e", "N_obs2", N_obs2);
      current_statement__ = 85;
      context__.validate_dims("data initialization","acc_e","int",
          context__.to_vec(N_obs2));
      acc_e = std::vector<int>(N_obs2, std::numeric_limits<int>::min());
      
      current_statement__ = 85;
      assign(acc_e, nil_index_list(), context__.vals_i("acc_e"),
        "assigning variable acc_e");
      current_statement__ = 86;
      validate_non_negative_index("corridor_all", "N_all", N_all);
      current_statement__ = 87;
      context__.validate_dims("data initialization","corridor_all","int",
          context__.to_vec(N_all));
      corridor_all = std::vector<int>(N_all, std::numeric_limits<int>::min());
      
      current_statement__ = 87;
      assign(corridor_all, nil_index_list(),
        context__.vals_i("corridor_all"), "assigning variable corridor_all");
      current_statement__ = 88;
      context__.validate_dims("data initialization","hypv_psi0","double",
          context__.to_vec());
      hypv_psi0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 88;
      hypv_psi0 = context__.vals_r("hypv_psi0")[(1 - 1)];
      current_statement__ = 89;
      context__.validate_dims("data initialization","hypv_psi1","double",
          context__.to_vec());
      hypv_psi1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 89;
      hypv_psi1 = context__.vals_r("hypv_psi1")[(1 - 1)];
      current_statement__ = 90;
      context__.validate_dims("data initialization","EL","double",
          context__.to_vec(2));
      EL = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 90;
      assign(EL, nil_index_list(), context__.vals_r("EL"),
        "assigning variable EL");
      current_statement__ = 91;
      context__.validate_dims("data initialization","EH","double",
          context__.to_vec(2));
      EH = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 91;
      assign(EH, nil_index_list(), context__.vals_r("EH"),
        "assigning variable EH");
      current_statement__ = 92;
      context__.validate_dims("data initialization","IL","double",
          context__.to_vec(2));
      IL = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 92;
      assign(IL, nil_index_list(), context__.vals_r("IL"),
        "assigning variable IL");
      current_statement__ = 93;
      context__.validate_dims("data initialization","IH","double",
          context__.to_vec(2));
      IH = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 93;
      assign(IH, nil_index_list(), context__.vals_r("IH"),
        "assigning variable IH");
      current_statement__ = 94;
      validate_non_negative_index("mu1", "N_obs1", N_obs1);
      current_statement__ = 95;
      validate_non_negative_index("mu2", "N_obs2", N_obs2);
      current_statement__ = 96;
      validate_non_negative_index("beta", "N_preds", N_preds);
      current_statement__ = 97;
      validate_non_negative_index("q1raw", "N_corr", N_corr);
      current_statement__ = 98;
      validate_non_negative_index("q2raw", "N_corr", N_corr);
      current_statement__ = 99;
      validate_non_negative_index("yraw", "N_all", N_all);
      current_statement__ = 100;
      validate_non_negative_index("y", "N_all", N_all);
      current_statement__ = 101;
      validate_non_negative_index("alpha_0", "N_all", N_all);
      current_statement__ = 102;
      validate_non_negative_index("alpha_1", "N_all", N_all);
      current_statement__ = 103;
      validate_non_negative_index("sigma_mu1", "N_obs1", N_obs1);
      current_statement__ = 104;
      validate_non_negative_index("sigma_mu2", "N_obs2", N_obs2);
      current_statement__ = 105;
      validate_non_negative_index("psi_0", "N_corr", N_corr);
      current_statement__ = 106;
      validate_non_negative_index("psi_1", "N_corr", N_corr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N_obs1;
      num_params_r__ += N_obs2;
      num_params_r__ += 3;
      num_params_r__ += 3;
      num_params_r__ += N_preds;
      num_params_r__ += 2;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N_corr;
      num_params_r__ += N_corr;
      num_params_r__ += N_all;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_migmod_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu1;
      mu1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs1);
      stan::math::fill(mu1, DUMMY_VAR__);
      
      current_statement__ = 1;
      mu1 = in__.vector(N_obs1);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu2;
      mu2 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs2);
      stan::math::fill(mu2, DUMMY_VAR__);
      
      current_statement__ = 2;
      mu2 = in__.vector(N_obs2);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda1;
      lambda1 = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(lambda1, DUMMY_VAR__);
      
      current_statement__ = 3;
      lambda1 = in__.vector(3);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(lambda1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(lambda1[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable lambda1");
        } else {
          current_statement__ = 3;
          assign(lambda1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(lambda1[(sym1__ - 1)], 0, 1),
            "assigning variable lambda1");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda2;
      lambda2 = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(lambda2, DUMMY_VAR__);
      
      current_statement__ = 4;
      lambda2 = in__.vector(3);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(lambda2[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable lambda2");
        } else {
          current_statement__ = 4;
          assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(lambda2[(sym1__ - 1)], 0, 1),
            "assigning variable lambda2");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(N_preds);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 5;
      beta = in__.vector(N_preds);
      std::vector<local_scalar_t__> sigma;
      sigma = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 6;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 6;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      local_scalar_t__ sigma_y;
      sigma_y = DUMMY_VAR__;
      
      current_statement__ = 7;
      sigma_y = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sigma_y = stan::math::lb_constrain(sigma_y, 0, lp__);
      } else {
        current_statement__ = 7;
        sigma_y = stan::math::lb_constrain(sigma_y, 0);
      }
      local_scalar_t__ sigma_psi_0;
      sigma_psi_0 = DUMMY_VAR__;
      
      current_statement__ = 8;
      sigma_psi_0 = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        sigma_psi_0 = stan::math::lb_constrain(sigma_psi_0, 0, lp__);
      } else {
        current_statement__ = 8;
        sigma_psi_0 = stan::math::lb_constrain(sigma_psi_0, 0);
      }
      local_scalar_t__ sigma_psi_1;
      sigma_psi_1 = DUMMY_VAR__;
      
      current_statement__ = 9;
      sigma_psi_1 = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        sigma_psi_1 = stan::math::lb_constrain(sigma_psi_1, 0, lp__);
      } else {
        current_statement__ = 9;
        sigma_psi_1 = stan::math::lb_constrain(sigma_psi_1, 0);
      }
      local_scalar_t__ psi_c0;
      psi_c0 = DUMMY_VAR__;
      
      current_statement__ = 10;
      psi_c0 = in__.scalar();
      local_scalar_t__ psi_c1;
      psi_c1 = DUMMY_VAR__;
      
      current_statement__ = 11;
      psi_c1 = in__.scalar();
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        psi_c1 = stan::math::lub_constrain(psi_c1, 0, 1, lp__);
      } else {
        current_statement__ = 11;
        psi_c1 = stan::math::lub_constrain(psi_c1, 0, 1);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> q1raw;
      q1raw = Eigen::Matrix<local_scalar_t__, -1, 1>(N_corr);
      stan::math::fill(q1raw, DUMMY_VAR__);
      
      current_statement__ = 12;
      q1raw = in__.vector(N_corr);
      Eigen::Matrix<local_scalar_t__, -1, 1> q2raw;
      q2raw = Eigen::Matrix<local_scalar_t__, -1, 1>(N_corr);
      stan::math::fill(q2raw, DUMMY_VAR__);
      
      current_statement__ = 13;
      q2raw = in__.vector(N_corr);
      Eigen::Matrix<local_scalar_t__, -1, 1> yraw;
      yraw = Eigen::Matrix<local_scalar_t__, -1, 1>(N_all);
      stan::math::fill(yraw, DUMMY_VAR__);
      
      current_statement__ = 14;
      yraw = in__.vector(N_all);
      Eigen::Matrix<local_scalar_t__, -1, 1> y;
      y = Eigen::Matrix<local_scalar_t__, -1, 1>(N_all);
      stan::math::fill(y, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_0;
      alpha_0 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_all);
      stan::math::fill(alpha_0, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_1;
      alpha_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_all);
      stan::math::fill(alpha_1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_mu1;
      sigma_mu1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs1);
      stan::math::fill(sigma_mu1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_mu2;
      sigma_mu2 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs2);
      stan::math::fill(sigma_mu2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> l_lambda1;
      l_lambda1 = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(l_lambda1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> l_lambda2;
      l_lambda2 = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(l_lambda2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_0;
      psi_0 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_corr);
      stan::math::fill(psi_0, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_1;
      psi_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_corr);
      stan::math::fill(psi_1, DUMMY_VAR__);
      
      current_statement__ = 24;
      assign(psi_0, nil_index_list(),
        add(psi_c0, multiply(sigma_psi_0, q1raw)), "assigning variable psi_0");
      current_statement__ = 25;
      assign(psi_1, nil_index_list(),
        add(psi_c1, multiply(sigma_psi_1, q2raw)), "assigning variable psi_1");
      current_statement__ = 26;
      assign(alpha_0, nil_index_list(),
        rvalue(psi_0, cons_list(index_multi(corridor_all), nil_index_list()),
          "psi_0"), "assigning variable alpha_0");
      current_statement__ = 27;
      assign(alpha_1, nil_index_list(),
        rvalue(psi_1, cons_list(index_multi(corridor_all), nil_index_list()),
          "psi_1"), "assigning variable alpha_1");
      current_statement__ = 28;
      assign(y, cons_list(index_min_max(1, N_corr), nil_index_list()),
        add(
          add(
            rvalue(alpha_0,
              cons_list(index_min_max(1, N_corr), nil_index_list()),
              "alpha_0"),
            multiply(
              rvalue(X_all,
                cons_list(index_min_max(1, N_corr),
                  cons_list(index_min_max(1, N_preds), nil_index_list())),
                "X_all"), beta)),
          multiply(sigma_y,
            rvalue(yraw,
              cons_list(index_min_max(1, N_corr), nil_index_list()), "yraw"))),
        "assigning variable y");
      current_statement__ = 31;
      for (int i = (N_corr + 1); i <= N_all; ++i) {
        current_statement__ = 29;
        assign(y, cons_list(index_uni(i), nil_index_list()),
          (((alpha_0[(i - 1)] + (alpha_1[(i - 1)] * y[((i - N_corr) - 1)])) +
             multiply(
               rvalue(X_all,
                 cons_list(index_uni(i),
                   cons_list(index_min_max(1, N_preds), nil_index_list())),
                 "X_all"), beta)) + (sigma_y * yraw[(i - 1)])),
          "assigning variable y");}
      current_statement__ = 33;
      for (int i = 1; i <= N_obs1; ++i) {
        current_statement__ = 32;
        assign(sigma_mu1, cons_list(index_uni(i), nil_index_list()),
          sigma[(acc_i[(i - 1)] - 1)], "assigning variable sigma_mu1");}
      current_statement__ = 35;
      for (int i = 1; i <= N_obs2; ++i) {
        current_statement__ = 34;
        assign(sigma_mu2, cons_list(index_uni(i), nil_index_list()),
          sigma[(acc_e[(i - 1)] - 1)], "assigning variable sigma_mu2");}
      current_statement__ = 36;
      assign(l_lambda1, nil_index_list(), stan::math::log(lambda1),
        "assigning variable l_lambda1");
      current_statement__ = 37;
      assign(l_lambda2, nil_index_list(), stan::math::log(lambda2),
        "assigning variable l_lambda2");
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_greater_or_equal(function__, "sigma_mu1[sym1__]",
                               sigma_mu1[(sym1__ - 1)], 0);}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_greater_or_equal(function__, "sigma_mu2[sym1__]",
                               sigma_mu2[(sym1__ - 1)], 0);}
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 20;
        current_statement__ = 20;
        check_less_or_equal(function__, "l_lambda1[sym1__]",
                            l_lambda1[(sym1__ - 1)], 0);}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_less_or_equal(function__, "l_lambda2[sym1__]",
                            l_lambda2[(sym1__ - 1)], 0);}
      {
        current_statement__ = 38;
        lp_accum__.add(normal_lpdf<propto__>(sigma_y, 0, 5));
        current_statement__ = 39;
        lp_accum__.add(student_t_lpdf<propto__>(sigma, 2.5, 0, 25));
        current_statement__ = 40;
        lp_accum__.add(normal_lpdf<propto__>(sigma_psi_0, 0, 3.0));
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<propto__>(sigma_psi_1, 0, 1.0));
        current_statement__ = 42;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0.0, 5.0));
        current_statement__ = 43;
        lp_accum__.add(
          beta_lpdf<propto__>(lambda1[(1 - 1)], IL[(2 - 1)], IL[(1 - 1)]));
        current_statement__ = 44;
        lp_accum__.add(
          beta_lpdf<propto__>(lambda1[(2 - 1)], IL[(2 - 1)], IL[(1 - 1)]));
        current_statement__ = 45;
        lp_accum__.add(
          beta_lpdf<propto__>(lambda1[(3 - 1)], IH[(2 - 1)], IH[(1 - 1)]));
        current_statement__ = 46;
        lp_accum__.add(
          beta_lpdf<propto__>(lambda2[(1 - 1)], EL[(2 - 1)], EL[(1 - 1)]));
        current_statement__ = 47;
        lp_accum__.add(
          beta_lpdf<propto__>(lambda2[(2 - 1)], EL[(2 - 1)], EL[(1 - 1)]));
        current_statement__ = 48;
        lp_accum__.add(
          beta_lpdf<propto__>(lambda2[(3 - 1)], EH[(2 - 1)], EH[(1 - 1)]));
        current_statement__ = 49;
        lp_accum__.add(normal_lpdf<propto__>(psi_c0, 0, hypv_psi0));
        current_statement__ = 50;
        lp_accum__.add(normal_lpdf<propto__>(psi_c1, 0, hypv_psi1));
        current_statement__ = 51;
        lp_accum__.add(normal_lpdf<propto__>(q1raw, 0, 1));
        current_statement__ = 52;
        lp_accum__.add(normal_lpdf<propto__>(q2raw, 0, 1));
        current_statement__ = 53;
        lp_accum__.add(normal_lpdf<propto__>(yraw, 0, 1));
        current_statement__ = 54;
        lp_accum__.add(
          normal_lpdf<propto__>(mu1,
            add(
              rvalue(y, cons_list(index_multi(z_ind1), nil_index_list()),
                "y"), multiply(XL_i, l_lambda1)), sigma_mu1));
        current_statement__ = 55;
        lp_accum__.add(
          normal_lpdf<propto__>(mu2,
            add(
              rvalue(y, cons_list(index_multi(z_ind2), nil_index_list()),
                "y"), multiply(XL_e, l_lambda2)), sigma_mu2));
        current_statement__ = 56;
        lp_accum__.add(poisson_log_lpmf<propto__>(z1, mu1));
        current_statement__ = 57;
        lp_accum__.add(poisson_log_lpmf<propto__>(z2, mu2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_migmod_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu1;
      mu1 = Eigen::Matrix<double, -1, 1>(N_obs1);
      stan::math::fill(mu1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      mu1 = in__.vector(N_obs1);
      Eigen::Matrix<double, -1, 1> mu2;
      mu2 = Eigen::Matrix<double, -1, 1>(N_obs2);
      stan::math::fill(mu2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      mu2 = in__.vector(N_obs2);
      Eigen::Matrix<double, -1, 1> lambda1;
      lambda1 = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(lambda1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      lambda1 = in__.vector(3);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 3;
        assign(lambda1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(lambda1[(sym1__ - 1)], 0, 1),
          "assigning variable lambda1");}
      Eigen::Matrix<double, -1, 1> lambda2;
      lambda2 = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(lambda2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      lambda2 = in__.vector(3);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(lambda2[(sym1__ - 1)], 0, 1),
          "assigning variable lambda2");}
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(N_preds);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      beta = in__.vector(N_preds);
      std::vector<double> sigma;
      sigma = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 6;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 6;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      double sigma_y;
      sigma_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_y = in__.scalar();
      current_statement__ = 7;
      sigma_y = stan::math::lb_constrain(sigma_y, 0);
      double sigma_psi_0;
      sigma_psi_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_psi_0 = in__.scalar();
      current_statement__ = 8;
      sigma_psi_0 = stan::math::lb_constrain(sigma_psi_0, 0);
      double sigma_psi_1;
      sigma_psi_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_psi_1 = in__.scalar();
      current_statement__ = 9;
      sigma_psi_1 = stan::math::lb_constrain(sigma_psi_1, 0);
      double psi_c0;
      psi_c0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      psi_c0 = in__.scalar();
      double psi_c1;
      psi_c1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      psi_c1 = in__.scalar();
      current_statement__ = 11;
      psi_c1 = stan::math::lub_constrain(psi_c1, 0, 1);
      Eigen::Matrix<double, -1, 1> q1raw;
      q1raw = Eigen::Matrix<double, -1, 1>(N_corr);
      stan::math::fill(q1raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      q1raw = in__.vector(N_corr);
      Eigen::Matrix<double, -1, 1> q2raw;
      q2raw = Eigen::Matrix<double, -1, 1>(N_corr);
      stan::math::fill(q2raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      q2raw = in__.vector(N_corr);
      Eigen::Matrix<double, -1, 1> yraw;
      yraw = Eigen::Matrix<double, -1, 1>(N_all);
      stan::math::fill(yraw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      yraw = in__.vector(N_all);
      Eigen::Matrix<double, -1, 1> y;
      y = Eigen::Matrix<double, -1, 1>(N_all);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> alpha_0;
      alpha_0 = Eigen::Matrix<double, -1, 1>(N_all);
      stan::math::fill(alpha_0, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> alpha_1;
      alpha_1 = Eigen::Matrix<double, -1, 1>(N_all);
      stan::math::fill(alpha_1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sigma_mu1;
      sigma_mu1 = Eigen::Matrix<double, -1, 1>(N_obs1);
      stan::math::fill(sigma_mu1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sigma_mu2;
      sigma_mu2 = Eigen::Matrix<double, -1, 1>(N_obs2);
      stan::math::fill(sigma_mu2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> l_lambda1;
      l_lambda1 = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(l_lambda1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> l_lambda2;
      l_lambda2 = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(l_lambda2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> psi_0;
      psi_0 = Eigen::Matrix<double, -1, 1>(N_corr);
      stan::math::fill(psi_0, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> psi_1;
      psi_1 = Eigen::Matrix<double, -1, 1>(N_corr);
      stan::math::fill(psi_1, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
        vars__.emplace_back(mu1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
        vars__.emplace_back(mu2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(lambda1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(lambda2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_preds; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_y);
      vars__.emplace_back(sigma_psi_0);
      vars__.emplace_back(sigma_psi_1);
      vars__.emplace_back(psi_c0);
      vars__.emplace_back(psi_c1);
      for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
        vars__.emplace_back(q1raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
        vars__.emplace_back(q2raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
        vars__.emplace_back(yraw[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 24;
      assign(psi_0, nil_index_list(),
        add(psi_c0, multiply(sigma_psi_0, q1raw)), "assigning variable psi_0");
      current_statement__ = 25;
      assign(psi_1, nil_index_list(),
        add(psi_c1, multiply(sigma_psi_1, q2raw)), "assigning variable psi_1");
      current_statement__ = 26;
      assign(alpha_0, nil_index_list(),
        rvalue(psi_0, cons_list(index_multi(corridor_all), nil_index_list()),
          "psi_0"), "assigning variable alpha_0");
      current_statement__ = 27;
      assign(alpha_1, nil_index_list(),
        rvalue(psi_1, cons_list(index_multi(corridor_all), nil_index_list()),
          "psi_1"), "assigning variable alpha_1");
      current_statement__ = 28;
      assign(y, cons_list(index_min_max(1, N_corr), nil_index_list()),
        add(
          add(
            rvalue(alpha_0,
              cons_list(index_min_max(1, N_corr), nil_index_list()),
              "alpha_0"),
            multiply(
              rvalue(X_all,
                cons_list(index_min_max(1, N_corr),
                  cons_list(index_min_max(1, N_preds), nil_index_list())),
                "X_all"), beta)),
          multiply(sigma_y,
            rvalue(yraw,
              cons_list(index_min_max(1, N_corr), nil_index_list()), "yraw"))),
        "assigning variable y");
      current_statement__ = 31;
      for (int i = (N_corr + 1); i <= N_all; ++i) {
        current_statement__ = 29;
        assign(y, cons_list(index_uni(i), nil_index_list()),
          (((alpha_0[(i - 1)] + (alpha_1[(i - 1)] * y[((i - N_corr) - 1)])) +
             multiply(
               rvalue(X_all,
                 cons_list(index_uni(i),
                   cons_list(index_min_max(1, N_preds), nil_index_list())),
                 "X_all"), beta)) + (sigma_y * yraw[(i - 1)])),
          "assigning variable y");}
      current_statement__ = 33;
      for (int i = 1; i <= N_obs1; ++i) {
        current_statement__ = 32;
        assign(sigma_mu1, cons_list(index_uni(i), nil_index_list()),
          sigma[(acc_i[(i - 1)] - 1)], "assigning variable sigma_mu1");}
      current_statement__ = 35;
      for (int i = 1; i <= N_obs2; ++i) {
        current_statement__ = 34;
        assign(sigma_mu2, cons_list(index_uni(i), nil_index_list()),
          sigma[(acc_e[(i - 1)] - 1)], "assigning variable sigma_mu2");}
      current_statement__ = 36;
      assign(l_lambda1, nil_index_list(), stan::math::log(lambda1),
        "assigning variable l_lambda1");
      current_statement__ = 37;
      assign(l_lambda2, nil_index_list(), stan::math::log(lambda2),
        "assigning variable l_lambda2");
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_greater_or_equal(function__, "sigma_mu1[sym1__]",
                               sigma_mu1[(sym1__ - 1)], 0);}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_greater_or_equal(function__, "sigma_mu2[sym1__]",
                               sigma_mu2[(sym1__ - 1)], 0);}
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 20;
        current_statement__ = 20;
        check_less_or_equal(function__, "l_lambda1[sym1__]",
                            l_lambda1[(sym1__ - 1)], 0);}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_less_or_equal(function__, "l_lambda2[sym1__]",
                            l_lambda2[(sym1__ - 1)], 0);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
          vars__.emplace_back(y[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
          vars__.emplace_back(alpha_0[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
          vars__.emplace_back(alpha_1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
          vars__.emplace_back(sigma_mu1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
          vars__.emplace_back(sigma_mu2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          vars__.emplace_back(l_lambda1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          vars__.emplace_back(l_lambda2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
          vars__.emplace_back(psi_0[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
          vars__.emplace_back(psi_1[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> mu1;
      mu1 = Eigen::Matrix<double, -1, 1>(N_obs1);
      stan::math::fill(mu1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu1_flat__;
        current_statement__ = 1;
        assign(mu1_flat__, nil_index_list(), context__.vals_r("mu1"),
          "assigning variable mu1_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
          current_statement__ = 1;
          assign(mu1, cons_list(index_uni(sym1__), nil_index_list()),
            mu1_flat__[(pos__ - 1)], "assigning variable mu1");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> mu2;
      mu2 = Eigen::Matrix<double, -1, 1>(N_obs2);
      stan::math::fill(mu2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu2_flat__;
        current_statement__ = 2;
        assign(mu2_flat__, nil_index_list(), context__.vals_r("mu2"),
          "assigning variable mu2_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
          current_statement__ = 2;
          assign(mu2, cons_list(index_uni(sym1__), nil_index_list()),
            mu2_flat__[(pos__ - 1)], "assigning variable mu2");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda1;
      lambda1 = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(lambda1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda1_flat__;
        current_statement__ = 3;
        assign(lambda1_flat__, nil_index_list(), context__.vals_r("lambda1"),
          "assigning variable lambda1_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 3;
          assign(lambda1, cons_list(index_uni(sym1__), nil_index_list()),
            lambda1_flat__[(pos__ - 1)], "assigning variable lambda1");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda1_free__;
      lambda1_free__ = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(lambda1_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 3;
        assign(lambda1_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(lambda1[(sym1__ - 1)], 0, 1),
          "assigning variable lambda1_free__");}
      Eigen::Matrix<double, -1, 1> lambda2;
      lambda2 = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(lambda2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda2_flat__;
        current_statement__ = 4;
        assign(lambda2_flat__, nil_index_list(), context__.vals_r("lambda2"),
          "assigning variable lambda2_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 4;
          assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
            lambda2_flat__[(pos__ - 1)], "assigning variable lambda2");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda2_free__;
      lambda2_free__ = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(lambda2_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        assign(lambda2_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(lambda2[(sym1__ - 1)], 0, 1),
          "assigning variable lambda2_free__");}
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(N_preds);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 5;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N_preds; ++sym1__) {
          current_statement__ = 5;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flat__[(pos__ - 1)], "assigning variable beta");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      std::vector<double> sigma;
      sigma = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(sigma, nil_index_list(), context__.vals_r("sigma"),
        "assigning variable sigma");
      std::vector<double> sigma_free__;
      sigma_free__ = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 6;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      double sigma_y;
      sigma_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_y = context__.vals_r("sigma_y")[(1 - 1)];
      double sigma_y_free__;
      sigma_y_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_y_free__ = stan::math::lb_free(sigma_y, 0);
      double sigma_psi_0;
      sigma_psi_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_psi_0 = context__.vals_r("sigma_psi_0")[(1 - 1)];
      double sigma_psi_0_free__;
      sigma_psi_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_psi_0_free__ = stan::math::lb_free(sigma_psi_0, 0);
      double sigma_psi_1;
      sigma_psi_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_psi_1 = context__.vals_r("sigma_psi_1")[(1 - 1)];
      double sigma_psi_1_free__;
      sigma_psi_1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_psi_1_free__ = stan::math::lb_free(sigma_psi_1, 0);
      double psi_c0;
      psi_c0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      psi_c0 = context__.vals_r("psi_c0")[(1 - 1)];
      double psi_c1;
      psi_c1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      psi_c1 = context__.vals_r("psi_c1")[(1 - 1)];
      double psi_c1_free__;
      psi_c1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      psi_c1_free__ = stan::math::lub_free(psi_c1, 0, 1);
      Eigen::Matrix<double, -1, 1> q1raw;
      q1raw = Eigen::Matrix<double, -1, 1>(N_corr);
      stan::math::fill(q1raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> q1raw_flat__;
        current_statement__ = 12;
        assign(q1raw_flat__, nil_index_list(), context__.vals_r("q1raw"),
          "assigning variable q1raw_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
          current_statement__ = 12;
          assign(q1raw, cons_list(index_uni(sym1__), nil_index_list()),
            q1raw_flat__[(pos__ - 1)], "assigning variable q1raw");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> q2raw;
      q2raw = Eigen::Matrix<double, -1, 1>(N_corr);
      stan::math::fill(q2raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> q2raw_flat__;
        current_statement__ = 13;
        assign(q2raw_flat__, nil_index_list(), context__.vals_r("q2raw"),
          "assigning variable q2raw_flat__");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
          current_statement__ = 13;
          assign(q2raw, cons_list(index_uni(sym1__), nil_index_list()),
            q2raw_flat__[(pos__ - 1)], "assigning variable q2raw");
          current_statement__ = 13;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> yraw;
      yraw = Eigen::Matrix<double, -1, 1>(N_all);
      stan::math::fill(yraw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> yraw_flat__;
        current_statement__ = 14;
        assign(yraw_flat__, nil_index_list(), context__.vals_r("yraw"),
          "assigning variable yraw_flat__");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
          current_statement__ = 14;
          assign(yraw, cons_list(index_uni(sym1__), nil_index_list()),
            yraw_flat__[(pos__ - 1)], "assigning variable yraw");
          current_statement__ = 14;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
        vars__.emplace_back(mu1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
        vars__.emplace_back(mu2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(lambda1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(lambda2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_preds; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_y_free__);
      vars__.emplace_back(sigma_psi_0_free__);
      vars__.emplace_back(sigma_psi_1_free__);
      vars__.emplace_back(psi_c0);
      vars__.emplace_back(psi_c1_free__);
      for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
        vars__.emplace_back(q1raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
        vars__.emplace_back(q2raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
        vars__.emplace_back(yraw[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("mu1");
    names__.emplace_back("mu2");
    names__.emplace_back("lambda1");
    names__.emplace_back("lambda2");
    names__.emplace_back("beta");
    names__.emplace_back("sigma");
    names__.emplace_back("sigma_y");
    names__.emplace_back("sigma_psi_0");
    names__.emplace_back("sigma_psi_1");
    names__.emplace_back("psi_c0");
    names__.emplace_back("psi_c1");
    names__.emplace_back("q1raw");
    names__.emplace_back("q2raw");
    names__.emplace_back("yraw");
    names__.emplace_back("y");
    names__.emplace_back("alpha_0");
    names__.emplace_back("alpha_1");
    names__.emplace_back("sigma_mu1");
    names__.emplace_back("sigma_mu2");
    names__.emplace_back("l_lambda1");
    names__.emplace_back("l_lambda2");
    names__.emplace_back("psi_0");
    names__.emplace_back("psi_1");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_preds)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_corr)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_corr)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_all)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_all)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_all)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_all)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_corr)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_corr)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_preds; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_y");
    param_names__.emplace_back(std::string() + "sigma_psi_0");
    param_names__.emplace_back(std::string() + "sigma_psi_1");
    param_names__.emplace_back(std::string() + "psi_c0");
    param_names__.emplace_back(std::string() + "psi_c1");
    for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "q1raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "q2raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "yraw" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_0" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_mu1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_mu2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "l_lambda1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "l_lambda2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_0" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_1" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_preds; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_y");
    param_names__.emplace_back(std::string() + "sigma_psi_0");
    param_names__.emplace_back(std::string() + "sigma_psi_1");
    param_names__.emplace_back(std::string() + "psi_c0");
    param_names__.emplace_back(std::string() + "psi_c1");
    for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "q1raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "q2raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "yraw" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_0" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_all; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_mu1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_mu2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "l_lambda1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "l_lambda2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_0" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_corr; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_1" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu1\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs1 << "},\"block\":\"parameters\"},{\"name\":\"mu2\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs2 << "},\"block\":\"parameters\"},{\"name\":\"lambda1\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << N_preds << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_psi_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_psi_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi_c0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi_c1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"q1raw\",\"type\":{\"name\":\"vector\",\"length\":" << N_corr << "},\"block\":\"parameters\"},{\"name\":\"q2raw\",\"type\":{\"name\":\"vector\",\"length\":" << N_corr << "},\"block\":\"parameters\"},{\"name\":\"yraw\",\"type\":{\"name\":\"vector\",\"length\":" << N_all << "},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"vector\",\"length\":" << N_all << "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_0\",\"type\":{\"name\":\"vector\",\"length\":" << N_all << "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_1\",\"type\":{\"name\":\"vector\",\"length\":" << N_all << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_mu1\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_mu2\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"l_lambda1\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"l_lambda2\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_0\",\"type\":{\"name\":\"vector\",\"length\":" << N_corr << "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_1\",\"type\":{\"name\":\"vector\",\"length\":" << N_corr << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu1\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs1 << "},\"block\":\"parameters\"},{\"name\":\"mu2\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs2 << "},\"block\":\"parameters\"},{\"name\":\"lambda1\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << N_preds << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_psi_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_psi_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi_c0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi_c1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"q1raw\",\"type\":{\"name\":\"vector\",\"length\":" << N_corr << "},\"block\":\"parameters\"},{\"name\":\"q2raw\",\"type\":{\"name\":\"vector\",\"length\":" << N_corr << "},\"block\":\"parameters\"},{\"name\":\"yraw\",\"type\":{\"name\":\"vector\",\"length\":" << N_all << "},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"vector\",\"length\":" << N_all << "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_0\",\"type\":{\"name\":\"vector\",\"length\":" << N_all << "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_1\",\"type\":{\"name\":\"vector\",\"length\":" << N_all << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_mu1\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_mu2\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"l_lambda1\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"l_lambda2\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_0\",\"type\":{\"name\":\"vector\",\"length\":" << N_corr << "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_1\",\"type\":{\"name\":\"vector\",\"length\":" << N_corr << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_migmod_namespace::model_migmod;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_migmod_namespace::profiles__;
}
#endif
#endif
