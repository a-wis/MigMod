hypv_psi0=3.0,
hypv_psi1=0.1,
hypm_psi1=1.0,
EL=c(16.95790, 44.94987),
EH=c(38.52081, 32.13520),
IL=c(8.066021, 57.490667),
IH=c(20.89134, 44.56385)
)
return(out)
}
.libPaths(c("C:/Rlibs/4.2.1",.libPaths()))
library(rstan)
.libPaths(c("C:/Rlibs/4.2.1",.libPaths()))
library(rstan)
#' Function to estimate migration model
migmod_estimation <- function(df,
sending = c("SE","FI","DK","PL"),
receiving = c("SE","FI","DK","PL"),
years = 2010:2019, stanmodel, ...){
# initial values ####
inits=list(beta=rep(0,data_inp0$N_preds),sigma=c(0.1,0.1),
sigma_psi_1=0.1, sigma_psi_2=0.1,
sigma_y=0.1,
lambda1=c(0.5,0.5,0.5),lambda2=c(0.5,0.5,0.5),
psi_c0=1,psi_c1=0.1)
standata <- data_2_standata(df=df,
sending=sending,
receiving=receiving,
years=years)
out <- rstan::sampling(stanmodels$lm, data = standata, ...)
}
# useful functions
#' Function checking if object is not-NA
#' @param x Vector of input values
#' @return A logical vector
is.nna = function(x){y=1-is.na(x); y=as.logical(y); return(y)}
#' Function transforming data frame with data to standata (a list)
#' @param df A data frame with migration data for sending countries, receiving countries, data quality measures and covariates
#' @param sending A vector of ISO2 codes with sending countries to be used in the model (recommended to keep SE and FI)
#' @param receiving A vector of ISO2 codes with receiving countries to be used in the model (recommended to keep SE and FI)
#' @param years A vector of years to be used in the model (2010 to 2019)
data_2_standata = function(df, sending = c("SE","FI","DK","PL"),
receiving = c("SE","FI","DK","PL"),
years = 2010:2019){
df <- df %>%
filter(Sending_iso2 %in% sending,
Receiving_iso2 %in% receiving,
Year %in% years)
#data undercounting auxiliary objects
XL_em=df %>%
filter(!is.na(Emig)) %>%
select(Emig,UE) %>%
model.matrix(Emig~UE-1,data=.)
XL_im=df %>%
filter(!is.na(Immi)) %>%
select(Immi,UI) %>%
model.matrix(Immi~UI-1,data=.)
XL_im[,1]=0
out=list(N_mis=df %>%
filter(is.na(Immi)& is.na(Emig)) %>%
pull(Emig) %>%
length(), # N missing E & I
N_obs=df %>%
filter(Year<2020 & (!is.na(Immi) | !is.na(Emig))) %>%
pull(Immi) %>% length(), # N obs E & I
N_all= dim(df)[1], # N all
N_obs1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi) %>% length(), # N obs I
N_mis1=df %>%
pull(Immi) %>% is.na() %>%
sum(), # N missing I
N_obs2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig) %>% length(), # N obs E
N_mis2=df %>%
pull(Emig) %>% is.na() %>%
sum(), # N missing E
N_preds=3, # No. predictors
z1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi), # data I
z2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig), # data E
z_ind1 = df %>%
select(Immi) %>%
is.nna() %>% which(), # index obs I
z_ind2 = df %>%
select(Emig) %>%
is.nna() %>% which(), # index obs E
X_all=df %>%
select(Pop.Sending,
Pop.Receiving,
contig) %>%
as.matrix, # predictors matrix
corridor_all=df %>%
pull(corr_f), # corridors index
N_corr=length(unique(df$Corridor)), # N corridors
acc_e=df %>%
mutate(acc_E=ifelse(AE=="Medium","High",AE)) %>%
filter(!is.na(Emig)) %>%
pull(acc_E), # accuracy index E
acc_i=df %>%
mutate(acc_I=ifelse(AI=="Medium","High",AI)) %>%
filter(!is.na(Immi)) %>%
pull(acc_I), # accuracy index I
XL_e=XL_em,
XL_i=XL_im,
hypv_phi=3.0,
hypv_psi0=3.0,
hypv_psi1=0.1,
hypm_psi1=1.0,
EL=c(16.95790, 44.94987),
EH=c(38.52081, 32.13520),
IL=c(8.066021, 57.490667),
IH=c(20.89134, 44.56385)
)
return(out)
}
#' Function to estimate migration model
migmod_estimation <- function(df,
sending = c("SE","FI","DK","PL"),
receiving = c("SE","FI","DK","PL"),
years = 2010:2019, stanmodel, ...){
# initial values ####
inits=list(beta=rep(0,data_inp0$N_preds),sigma=c(0.1,0.1),
sigma_psi_1=0.1, sigma_psi_2=0.1,
sigma_y=0.1,
lambda1=c(0.5,0.5,0.5),lambda2=c(0.5,0.5,0.5),
psi_c0=1,psi_c1=0.1)
standata <- data_2_standata(df=df,
sending=sending,
receiving=receiving,
years=years)
out <- rstan::sampling(stanmodels$migmod, data = standata, ...)
}
#' Function to estimate migration model
migmod_estimation <- function(df,
sending = c("SE","FI","DK","PL"),
receiving = c("SE","FI","DK","PL"),
years = 2010:2019, stanmodel, ...){
# initial values ####
inits=list(beta=rep(0,data_inp0$N_preds),sigma=c(0.1,0.1),
sigma_psi_1=0.1, sigma_psi_2=0.1,
sigma_y=0.1,
lambda1=c(0.5,0.5,0.5),lambda2=c(0.5,0.5,0.5),
psi_c0=1,psi_c1=0.1)
standata <- data_2_standata(df=df,
sending=sending,
receiving=receiving,
years=years)
out <- rstan::sampling(stanmodels$migmod, data = standata,
cores=2, chains=2,
init = list(inits,inits),
iter = 1500, warmup = 500,...)
}
library(readxl)
library(tidyverse)
library(zoo)
library(readr)
# function for matching country names (from FUME_ODS repo)
match_coutry_names=function(vnames,vpatterns){
ind_country_name=NULL
for (i in length(vpatterns)){
ind_country_name[i] = agrep(vpatterns[i],vnames,max.distance = 7)
}
return(ind_country_name)
}
# reading in country names and codes ####
translation_iso <- read_csv("rawdata-delete-later/ISO_translation.csv") %>%
rename(GEO=Country,
GEO_iso2=Alpha_2_code,
GEO_iso3=Alpha_3_code) %>%
select(-Numeric)
translation_iso_p <- read_csv("rawdata-delete-later/ISO_translation.csv") %>%
rename(PARTNER=Country,
PARTNER_iso2=Alpha_2_code,
PARTNER_iso3=Alpha_3_code) %>%
select(-Numeric)
translation_iso_un <- read_csv("rawdata-delete-later/un_country_codes.csv") %>%
rename(GEO_iso3=code) %>%
left_join(translation_iso, by="GEO_iso3") %>%
rename(GEO2=GEO, GEO=country)
# data quality (from Danko's website
#https://maciej-jan-danko.shinyapps.io/HMigD_Shiny_App_I)
U_e_raw <- read_excel("rawdata-delete-later/Undercounting_emi_table.xlsx") %>%
# mutate(`2019`=`2018`) %>%
pivot_longer(cols = 2:last_col(),
names_to = "Year",
values_to = "UE.class") %>%
mutate(Year = as.numeric(Year),
UE.class = ifelse(str_detect(UE.class,pattern = "Imputed"),NA,UE.class),
UE=as_factor(UE.class),
UE=fct_relevel(UE,"low","medium","high")) %>%
filter(Year>2009) %>%
select(-UE.class)
U_i_raw <- read_excel("rawdata-delete-later/Undercounting_imm_table.xlsx") %>%
# mutate(`2019`=`2018`) %>%
pivot_longer(cols = 2:last_col(),
names_to = "Year",
values_to = "UI.class") %>%
mutate(Year = as.numeric(Year),
UI.class = ifelse(str_detect(UI.class,pattern = "Imputed"),NA,UI.class),
UI=as_factor(UI.class)) %>%
filter(Year>2009) %>%
select(-UI.class)
A_e_raw <- read_excel("rawdata-delete-later/Accuracy_emi_table.xlsx") %>%
mutate(`2019`=`2018`) %>%
pivot_longer(cols = 2:last_col(),
names_to = "Year",
values_to = "AE.class") %>%
mutate(Year = as.numeric(Year),
AE.class = ifelse(str_detect(AE.class,pattern = "Imputed"),NA,AE.class),
AE=as_factor(AE.class),
AE=fct_relevel(AE,"Low","Medium","High")) %>%
filter(Year>2009) %>%
select(-AE.class)
A_i_raw <- read_excel("rawdata-delete-later/Accuracy_imm_table.xlsx") %>%
mutate(`2019`=`2018`) %>%
pivot_longer(cols = 2:last_col(),
names_to = "Year",
values_to = "AI.class") %>%
mutate(Year = as.numeric(Year),
AI.class = ifelse(str_detect(AI.class,pattern = "Imputed"),NA,AI.class),
AI=as_factor(AI.class),
AI=fct_relevel(AI,"Low","Medium","High")) %>%
filter(Year>2009) %>%
select(-AI.class)
# reading in Eurostat data ####
### ### ### ### ### ### ### ###
## population ####
pop_tot <- read_csv("rawdata-delete-later/demo_pjan.csv") %>%
rename(Pop=OBS_VALUE,
GEO_iso2=geo,
Year=TIME_PERIOD) %>%
select(GEO_iso2,Year,Pop) %>%
mutate(GEO_iso2 = ifelse(GEO_iso2=="EL","GR",GEO_iso2))
## emigration ####
emi_tot <- read_csv("rawdata-delete-later/migr_emi3nxt_3_Data.csv",
col_types = cols(Value = col_number()),
na=":") %>%
select(-AGE,-AGEDEF) %>%
mutate(PARTNER=ifelse(PARTNER=="Germany (until 1990 former territory of the FRG)","Germany",PARTNER),
GEO=ifelse(GEO=="Germany (until 1990 former territory of the FRG)","Germany",GEO)) %>%
filter(TIME>=2010) %>%
left_join(translation_iso) %>%
left_join(translation_iso_p) %>%
rename(Year=TIME,
Emig=Value) %>%
left_join(U_e_raw, by = c("GEO_iso2"="GEO_iso2",
"Year"="Year")) %>%
left_join(A_e_raw, by = c("GEO_iso2"="GEO_iso2",
"Year"="Year")) %>%
left_join(pop_tot,
by = c("GEO_iso2"="GEO_iso2","Year"="Year")) %>%
left_join(pop_tot, suffix = c(".GEO",".PARTNER"),
by = c("PARTNER_iso2"="GEO_iso2","Year"="Year")) %>%
filter(PARTNER!="Total") %>%
rename_with(~ str_replace(.,pattern = "GEO","Sending"), contains("GEO")) %>%
rename_with(~ str_replace(.,pattern = "PARTNER","Receiving"), contains("PARTNER")) %>%
mutate(Corridor=str_c(Sending_iso3,Receiving_iso3,sep = "_"))
### ### ### ### ### ### ### ###
## immigration ####
imi_tot=read_csv("rawdata-delete-later/migr_imm5prv_6_Data.csv",
col_types = cols(Value = col_number()),
na=":") %>%
select(-AGE,-AGEDEF) %>%
mutate(PARTNER=ifelse(PARTNER=="Germany (until 1990 former territory of the FRG)","Germany",PARTNER),
GEO=ifelse(GEO=="Germany (until 1990 former territory of the FRG)","Germany",GEO)) %>%
filter(TIME>=2010) %>%
left_join(translation_iso) %>%
left_join(translation_iso_p) %>%
rename(Year=TIME,
Immi=Value) %>%
left_join(U_i_raw, by = c("GEO_iso2"="GEO_iso2",
"Year"="Year")) %>%
left_join(A_i_raw, by = c("GEO_iso2"="GEO_iso2",
"Year"="Year")) %>%
filter(PARTNER!="Total") %>%
rename_with(~ str_replace(.,pattern = "GEO","Receiving"), contains("GEO")) %>%
rename_with(~ str_replace(.,pattern = "PARTNER","Sending"), contains("PARTNER")) %>%
mutate(Corridor=str_c(Sending_iso3,Receiving_iso3,sep = "_"))
# reading in contiguity variables CEPII ####
dist_cepii <- read_excel("rawdata-delete-later/dist_cepii.xls") %>%
mutate(iso_o=ifelse(iso_o=="ROM","ROU",iso_o),
iso_d=ifelse(iso_d=="ROM","ROU",iso_d),
Corridor=str_c(iso_o,iso_d,sep = "_"),
distw=as.numeric(distw),
distwces=as.numeric(distwces))
# joining data ####
mig_data= imi_tot %>%
right_join(emi_tot) %>%
left_join(dist_cepii) %>%
filter(Sending!=Receiving) %>%
mutate(corr_f=Corridor %>% as.factor() %>% as.numeric(),
orig=Sending %>% as.factor() %>% as.numeric(),
dest=Receiving %>% as.factor() %>% as.numeric())
#' Function to estimate migration model
#' @param df A data frame with migration data for sending countries, receiving countries, data quality measures and covariates
#' @param sending A vector of ISO2 codes with sending countries to be used in the model (recommended to keep SE and FI)
#' @param receiving A vector of ISO2 codes with receiving countries to be used in the model (recommended to keep SE and FI)
#' @param years A vector of years to be used in the model (2010 to 2019)
#' @param stanmodel
migmod_estimation <- function(df,
sending = c("SE","FI","DK","PL"),
receiving = c("SE","FI","DK","PL"),
years = 2010:2019, ...){
# initial values ####
inits=list(beta=rep(0,data_inp0$N_preds),sigma=c(0.1,0.1),
sigma_psi_1=0.1, sigma_psi_2=0.1,
sigma_y=0.1,
lambda1=c(0.5,0.5,0.5),lambda2=c(0.5,0.5,0.5),
psi_c0=1,psi_c1=0.1)
standata <- data_2_standata(df=df,
sending=sending,
receiving=receiving,
years=years)
out <- rstan::sampling(stanmodels$migmod, data = standata,
cores=2, chains=2,
init = list(inits,inits),
iter = 1500, warmup = 500,...)
}
#' Function to estimate migration model
#' @param df A data frame with migration data for sending countries, receiving countries, data quality measures and covariates
#' @param sending A vector of ISO2 codes with sending countries to be used in the model (recommended to keep SE and FI)
#' @param receiving A vector of ISO2 codes with receiving countries to be used in the model (recommended to keep SE and FI)
#' @param years A vector of years to be used in the model (2010 to 2019)
#' @param ... Arguments passed to `rstan::sampling` (e.g. iter, chains).
#' @return An object of class `stanfit` returned by `rstan::sampling`
#'
migmod_estimation <- function(df,
sending = c("SE","FI","DK","PL"),
receiving = c("SE","FI","DK","PL"),
years = 2010:2019, ...){
# initial values ####
inits=list(beta=rep(0,data_inp0$N_preds),sigma=c(0.1,0.1),
sigma_psi_1=0.1, sigma_psi_2=0.1,
sigma_y=0.1,
lambda1=c(0.5,0.5,0.5),lambda2=c(0.5,0.5,0.5),
psi_c0=1,psi_c1=0.1)
standata <- data_2_standata(df=df,
sending=sending,
receiving=receiving,
years=years)
out <- rstan::sampling(stanmodels$migmod, data = standata,
cores=2, chains=2,
init = list(inits,inits),
iter = 1500, warmup = 500,...)
}
file.show(file.path("R", "migmod-package.R"))
View(mig_data)
# joining data ####
mig_data= imi_tot %>%
right_join(emi_tot) %>%
left_join(dist_cepii) %>%
filter(Sending!=Receiving)
#' Function transforming data frame with data to standata (a list)
#' @param df A data frame with migration data for sending countries, receiving countries, data quality measures and covariates
#' @param sending A vector of ISO2 codes with sending countries to be used in the model (recommended to keep SE and FI)
#' @param receiving A vector of ISO2 codes with receiving countries to be used in the model (recommended to keep SE and FI)
#' @param years A vector of years to be used in the model (2010 to 2019)
#' @return A list to be passed on to the stan model that contains all required inputs
#'
data_2_standata = function(df, sending = c("SE","FI","DK","PL"),
receiving = c("SE","FI","DK","PL"),
years = 2010:2019){
df <- df %>%
filter(Sending_iso2 %in% sending,
Receiving_iso2 %in% receiving,
Year %in% years) %>%
mutate(corr_f=Corridor %>% as.factor() %>% as.numeric(),
orig=Sending %>% as.factor() %>% as.numeric(),
dest=Receiving %>% as.factor() %>% as.numeric())
#data undercounting auxiliary objects
XL_em=df %>%
filter(!is.na(Emig)) %>%
select(Emig,UE) %>%
model.matrix(Emig~UE-1,data=.)
XL_im=df %>%
filter(!is.na(Immi)) %>%
select(Immi,UI) %>%
model.matrix(Immi~UI-1,data=.)
XL_im[,1]=0
out=list(N_mis=df %>%
filter(is.na(Immi)& is.na(Emig)) %>%
pull(Emig) %>%
length(), # N missing E & I
N_obs=df %>%
filter(Year<2020 & (!is.na(Immi) | !is.na(Emig))) %>%
pull(Immi) %>% length(), # N obs E & I
N_all= dim(df)[1], # N all
N_obs1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi) %>% length(), # N obs I
N_mis1=df %>%
pull(Immi) %>% is.na() %>%
sum(), # N missing I
N_obs2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig) %>% length(), # N obs E
N_mis2=df %>%
pull(Emig) %>% is.na() %>%
sum(), # N missing E
N_preds=3, # No. predictors
z1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi), # data I
z2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig), # data E
z_ind1 = df %>%
select(Immi) %>%
is.nna() %>% which(), # index obs I
z_ind2 = df %>%
select(Emig) %>%
is.nna() %>% which(), # index obs E
X_all=df %>%
select(Pop.Sending,
Pop.Receiving,
contig) %>%
as.matrix, # predictors matrix
corridor_all=df %>%
pull(corr_f), # corridors index
N_corr=length(unique(df$Corridor)), # N corridors
acc_e=df %>%
mutate(acc_E=ifelse(AE=="Medium","High",AE)) %>%
filter(!is.na(Emig)) %>%
pull(acc_E), # accuracy index E
acc_i=df %>%
mutate(acc_I=ifelse(AI=="Medium","High",AI)) %>%
filter(!is.na(Immi)) %>%
pull(acc_I), # accuracy index I
XL_e=XL_em,
XL_i=XL_im,
hypv_phi=3.0,
hypv_psi0=3.0,
hypv_psi1=0.1,
hypm_psi1=1.0,
EL=c(16.95790, 44.94987),
EH=c(38.52081, 32.13520),
IL=c(8.066021, 57.490667),
IH=c(20.89134, 44.56385)
)
return(out)
}
use_data(mig_data, pkg ="MigMod")
library(devtools)
use_data(mig_data, pkg ="MigMod")
use_data(mig_data, pkg ="MigMod")
use_data(as.name(mig_data), pkg ="MigMod")
usethis::use_data(mig_data, pkg ="MigMod")
usethis::use_data("mig_data", pkg ="MigMod")
str(mig_data)
is.name(mig_data)
as.name(mig_data)
usethis::use_data("mig_data", pkg ="MigMod",overwrite = T)
usethis::use_data(mig_data, pkg ="MigMod",overwrite = T)
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
save(mig_data,file = "data/mig_data.rda")
usethis::use_data(mig_data, pkg ="MigMod",overwrite = T)
rm(list=ls())
roxygen2::roxygenize()
.Last.error
roxygen2::roxygenize()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
try(roxygen2::roxygenize(load_code = sourceDir), silent = F)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
try(roxygen2::roxygenize(load_code = sourceDir), silent = FALSE)
try(roxygen2::roxygenize(load_code = sourceDir), silent = FALSE)
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = FALSE)
.libPaths(c("C:/Rlibs/4.2.1",.libPaths()))
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = FALSE)
roxygen2::roxygenize()
install.packages("../MigMod", repos = NULL, type = "source")
try(roxygen2::roxygenize(load_code = sourceDir), silent = FALSE)
example(source)
example(source)
View(sourceDir)
.libPaths(c("C:/Rlibs/4.2.1",.libPaths()))
View(sourceDir)
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
devtools::check()
roxygen2::roxygenize()
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
sessionInfo()
sessionInfo()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
sessionInfo()
roxygen2::roxygenize()
sessionInfo()
.libPaths(c("C:/Rlibs/4.2.1",.libPaths()))
library(rstan)
library(rstantools)
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
writeLines(readLines(file.path(Sys.getenv(“HOME”), “.R/Makevars”)))
writeLines(readLines(file.path(Sys.getenv("HOME"), ".R/Makevars")))
