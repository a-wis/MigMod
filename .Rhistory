filter(!is.na(Immi)) %>%
pull(acc_I), # accuracy index I
XL_e=XL_em,
XL_i=XL_im,
hypv_phi=3.0,
hypv_psi0=3.0,
hypv_psi1=0.1,
hypm_psi1=1.0,
EL=c(16.95790, 44.94987),
EH=c(38.52081, 32.13520),
IL=c(8.066021, 57.490667),
IH=c(20.89134, 44.56385)
)
return(out)
}
foo=data_2_standata(df = mig_data)
foo$acc_e
foo$acc_i
fit1=stan(file = "inst/stan/migmod.stan",
data = data_2_standata(df = mig_data),
init = list(inits,inits),
iter = 1500, warmup = 500,
verbose = FALSE, chains=2,thin=1,
control = list(adapt_delta=0.9,max_treedepth=12),
cores = 2,seed=26)
sum1=summary(fit1)$summary
View(sum1)
plot(fit1,plotfun="trace",par="mu2[73]")
plot(fit1,plotfun="trace",par="yraw[62]")
plot(fit1,plotfun="trace",par="psi_1[9]")
mig_data %>% filter(Sending_iso2 %in% c("SE","FI","FR","PL"), Receiving_iso2 %in% c("SE","FI","FR","PL"), years=2010:2019) %>%
ggplot() + geom_line(aes(x=Year,y=Immi,colour="Immi"))+ geom_line(aes(x=Year,y=Emig,colour="Emig")) + facet_grid(Sending_iso2~Receiving_iso2)
mig_data %>% filter(Sending_iso2 %in% c("SE","FI","FR","PL"), Receiving_iso2 %in% c("SE","FI","FR","PL"), years%in%2010:2019) %>% ggplot() + geom_line(aes(x=Year,y=Immi,colour="Immi"))+ geom_line(aes(x=Year,y=Emig,colour="Emig")) + facet_grid(Sending_iso2~Receiving_iso2)
mig_data %>% filter(Sending_iso2 %in% c("SE","FI","FR","PL"), Receiving_iso2 %in% c("SE","FI","FR","PL"), Year%in%2010:2019) %>% ggplot() + geom_line(aes(x=Year,y=Immi,colour="Immi"))+ geom_line(aes(x=Year,y=Emig,colour="Emig")) + facet_grid(Sending_iso2~Receiving_iso2)
mig_data %>% filter(Sending_iso2 %in% c("SE","FI","FR","PL"), Receiving_iso2 %in% c("SE","FI","FR","PL"), Year%in%2010:2019) %>% View
### ### ### ### ### ### ### ###
## immigration ####
imi_tot=read_csv("rawdata-delete-later/migr_imm5prv_6_Data.csv",
col_types = cols(Value = col_number()),
na=":") %>%
select(-AGE,-AGEDEF) %>%
mutate(PARTNER=ifelse(PARTNER=="Germany (until 1990 former territory of the FRG)","Germany",PARTNER),
GEO=ifelse(GEO=="Germany (until 1990 former territory of the FRG)","Germany",GEO)) %>%
filter(TIME>=2010) %>%
left_join(translation_iso) %>%
left_join(translation_iso_p) %>%
rename(Year=TIME,
Immi=Value) %>%
left_join(U_i_raw, by = c("GEO_iso2"="GEO_iso2",
"Year"="Year")) %>%
left_join(A_i_raw, by = c("GEO_iso2"="GEO_iso2",
"Year"="Year")) %>%
filter(PARTNER!="Total") %>%
rename_with(~ str_replace(.,pattern = "GEO","Receiving"), contains("GEO")) %>%
rename_with(~ str_replace(.,pattern = "PARTNER","Sending"), contains("PARTNER")) %>%
mutate(Corridor=str_c(Sending_iso3,Receiving_iso3,sep = "_"),
SE_benchmark=ifelse(Receiving_iso2=="SE",1,0))
View(imi_tot)
# joining data ####
mig_data= imi_tot %>%
right_join(emi_tot) %>%
left_join(dist_cepii) %>%
filter(Sending!=Receiving)
mig_data %>%
filter(!is.na(Immi)) %>%
select(Immi,UI) %>%
model.matrix(Immi~UI-1,data=.)
#' Function transforming data frame with data to standata (a list)
#' @param df A data frame with migration data for sending countries, receiving countries, data quality measures and covariates
#' @param sending A vector of ISO2 codes with sending countries to be used in the model (recommended to keep SE and FI)
#' @param receiving A vector of ISO2 codes with receiving countries to be used in the model (recommended to keep SE and FI)
#' @param years A vector of years to be used in the model (2010 to 2019)
#' @return A list to be passed on to the stan model that contains all required inputs
#'
data_2_standata = function(df, sending = c("SE","FI","IT","PL"),
receiving = c("SE","FI","IT","PL"),
years = 2010:2019){
df <- df %>%
filter(Sending_iso2 %in% sending,
Receiving_iso2 %in% receiving,
Year %in% years) %>%
mutate(corr_f=Corridor %>% as.factor() %>% as.numeric(),
orig=Sending %>% as.factor() %>% as.numeric(),
dest=Receiving %>% as.factor() %>% as.numeric())
#data undercounting auxiliary objects
XL_em=df %>%
filter(!is.na(Emig)) %>%
select(Emig,UE) %>%
model.matrix(Emig~UE-1,data=.)
XL_im=df %>%
filter(!is.na(Immi)) %>%
select(Immi,UI) %>%
model.matrix(Immi~UI-1,data=.)
XL_im[,1]=0
out=list(N_mis=df %>%
filter(is.na(Immi)& is.na(Emig)) %>%
pull(Emig) %>%
length(), # N missing E & I
N_obs=df %>%
filter(Year<2020 & (!is.na(Immi) | !is.na(Emig))) %>%
pull(Immi) %>% length(), # N obs E & I
N_all= dim(df)[1], # N all
N_obs1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi) %>% length(), # N obs I
N_mis1=df %>%
pull(Immi) %>% is.na() %>%
sum(), # N missing I
N_obs2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig) %>% length(), # N obs E
N_mis2=df %>%
pull(Emig) %>% is.na() %>%
sum(), # N missing E
N_preds=3, # No. predictors
z1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi), # data I
z2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig), # data E
z_ind1 = df %>%
select(Immi) %>%
is.nna() %>% which(), # index obs I
z_ind2 = df %>%
select(Emig) %>%
is.nna() %>% which(), # index obs E
X_all=df %>%
select(Pop.Sending,
Pop.Receiving,
contig) %>%
as.matrix, # predictors matrix
corridor_all=df %>%
pull(corr_f), # corridors index
N_corr=length(unique(df$Corridor)), # N corridors
acc_e=df %>%
mutate(acc_E=as.numeric(fct_recode(AE,"High"="Medium"))) %>%
filter(!is.na(Emig)) %>%
pull(acc_E), # accuracy index E
acc_i=df %>%
mutate(acc_I=as.numeric(fct_recode(AI,"High"="Medium"))) %>%
filter(!is.na(Immi)) %>%
pull(acc_I), # accuracy index I
XL_e=XL_em,
XL_i=XL_im,
hypv_phi=3.0,
hypv_psi0=3.0,
hypv_psi1=0.1,
hypm_psi1=1.0,
EL=c(16.95790, 44.94987),
EH=c(38.52081, 32.13520),
IL=c(8.066021, 57.490667),
IH=c(20.89134, 44.56385)
)
return(out)
}
mig_data %>% filter(Sending_iso2 %in% c("SE","FI","IT","PL"), Receiving_iso2 %in% c("SE","FI","IT","PL"), years=2010:2019) %>%
mig_data %>% filter(Sending_iso2 %in% c("SE","FI","IT","PL"), Receiving_iso2 %in% c("SE","FI","IT","PL"), Year%in%2010:2019) %>% ggplot() + geom_line(aes(x=Year,y=Immi,colour="Immi"))+ geom_line(aes(x=Year,y=Emig,colour="Emig")) + facet_grid(Sending_iso2~Receiving_iso2)
foo=data_2_standata(df = mig_data)
foo$acc_i
foo$acc_e
#' Function transforming data frame with data to standata (a list)
#' @param df A data frame with migration data for sending countries, receiving countries, data quality measures and covariates
#' @param sending A vector of ISO2 codes with sending countries to be used in the model (recommended to keep SE and FI)
#' @param receiving A vector of ISO2 codes with receiving countries to be used in the model (recommended to keep SE and FI)
#' @param years A vector of years to be used in the model (2010 to 2019)
#' @return A list to be passed on to the stan model that contains all required inputs
#'
data_2_standata = function(df, sending = c("SE","FI","IT","PL"),
receiving = c("SE","FI","IT","PL"),
years = 2010:2019){
df <- df %>%
filter(Sending_iso2 %in% sending,
Receiving_iso2 %in% receiving,
Year %in% years) %>%
mutate(corr_f=Corridor %>% as.factor() %>% as.numeric(),
orig=Sending %>% as.factor() %>% as.numeric(),
dest=Receiving %>% as.factor() %>% as.numeric())
#data undercounting auxiliary objects
XL_em=df %>%
filter(!is.na(Emig)) %>%
select(Emig,UE) %>%
model.matrix(Emig~UE-1,data=.)
XL_im=df %>%
filter(!is.na(Immi)) %>%
select(Immi,UI) %>%
model.matrix(Immi~UI-1,data=.)
XL_im[,1]=0
out=list(N_mis=df %>%
filter(is.na(Immi)& is.na(Emig)) %>%
pull(Emig) %>%
length(), # N missing E & I
N_obs=df %>%
filter(Year<2020 & (!is.na(Immi) | !is.na(Emig))) %>%
pull(Immi) %>% length(), # N obs E & I
N_all= dim(df)[1], # N all
N_obs1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi) %>% length(), # N obs I
N_mis1=df %>%
pull(Immi) %>% is.na() %>%
sum(), # N missing I
N_obs2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig) %>% length(), # N obs E
N_mis2=df %>%
pull(Emig) %>% is.na() %>%
sum(), # N missing E
N_preds=3, # No. predictors
z1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi), # data I
z2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig), # data E
z_ind1 = df %>%
select(Immi) %>%
is.nna() %>% which(), # index obs I
z_ind2 = df %>%
select(Emig) %>%
is.nna() %>% which(), # index obs E
X_all=df %>%
select(Pop.Sending,
Pop.Receiving,
contig) %>%
as.matrix, # predictors matrix
corridor_all=df %>%
pull(corr_f), # corridors index
N_corr=length(unique(df$Corridor)), # N corridors
acc_e=df %>%
mutate(acc_E=as.numeric(fct_recode(AE,"Low"="Medium"))) %>%
filter(!is.na(Emig)) %>%
pull(acc_E), # accuracy index E
acc_i=df %>%
mutate(acc_I=as.numeric(fct_recode(AI,"Low"="Medium"))) %>%
filter(!is.na(Immi)) %>%
pull(acc_I), # accuracy index I
XL_e=XL_em,
XL_i=XL_im,
hypv_phi=3.0,
hypv_psi0=3.0,
hypv_psi1=0.1,
hypm_psi1=1.0,
EL=c(16.95790, 44.94987),
EH=c(38.52081, 32.13520),
IL=c(8.066021, 57.490667),
IH=c(20.89134, 44.56385)
)
return(out)
}
foo=data_2_standata(df = mig_data)
foo$acc_i
foo$acc_e
foo$XL_e
foo$XL_i
fit1=stan(file = "inst/stan/migmod.stan",
data = data_2_standata(df = mig_data),
init = list(inits,inits),
iter = 1500, warmup = 500,
verbose = FALSE, chains=2,thin=1,
control = list(adapt_delta=0.9,max_treedepth=15),
cores = 2,seed=26)
fit1=stan(file = "inst/stan/migmod.stan",
data = data_2_standata(df = mig_data),
init = list(inits,inits),
iter = 1000, warmup = 500,
verbose = FALSE, chains=2,thin=1,
control = list(adapt_delta=0.9,max_treedepth=15),
cores = 2,seed=26)
plot(fit1,plotfun="trace",par="beta")
plot(fit1,plotfun="trace",par="beta",inc_warmup=T)
#' Function transforming data frame with data to standata (a list)
#' @param df A data frame with migration data for sending countries, receiving countries, data quality measures and covariates
#' @param sending A vector of ISO2 codes with sending countries to be used in the model (recommended to keep SE and FI)
#' @param receiving A vector of ISO2 codes with receiving countries to be used in the model (recommended to keep SE and FI)
#' @param years A vector of years to be used in the model (2010 to 2019)
#' @return A list to be passed on to the stan model that contains all required inputs
#'
data_2_standata = function(df, sending = c("SE","FI","IT","PL"),
receiving = c("SE","FI","IT","PL"),
years = 2010:2019){
df <- df %>%
filter(Sending_iso2 %in% sending,
Receiving_iso2 %in% receiving,
Year %in% years) %>%
mutate(corr_f=Corridor %>% as.factor() %>% as.numeric(),
orig=Sending %>% as.factor() %>% as.numeric(),
dest=Receiving %>% as.factor() %>% as.numeric())
#data undercounting auxiliary objects
XL_em=df %>%
filter(!is.na(Emig)) %>%
select(Emig,UE) %>%
model.matrix(Emig~UE-1,data=.)
XL_im=df %>%
filter(!is.na(Immi)) %>%
select(Immi,UI) %>%
model.matrix(Immi~UI-1,data=.)
XL_im[,1]=0
out=list(N_mis=df %>%
filter(is.na(Immi)& is.na(Emig)) %>%
pull(Emig) %>%
length(), # N missing E & I
N_obs=df %>%
filter(Year<2020 & (!is.na(Immi) | !is.na(Emig))) %>%
pull(Immi) %>% length(), # N obs E & I
N_all= dim(df)[1], # N all
N_obs1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi) %>% length(), # N obs I
N_mis1=df %>%
pull(Immi) %>% is.na() %>%
sum(), # N missing I
N_obs2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig) %>% length(), # N obs E
N_mis2=df %>%
pull(Emig) %>% is.na() %>%
sum(), # N missing E
N_preds=3, # No. predictors
z1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi), # data I
z2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig), # data E
z_ind1 = df %>%
select(Immi) %>%
is.nna() %>% which(), # index obs I
z_ind2 = df %>%
select(Emig) %>%
is.nna() %>% which(), # index obs E
X_all=df %>%
select(Pop.Sending,
Pop.Receiving,
distw) %>%
log %>%
as.matrix, # predictors matrix
corridor_all=df %>%
pull(corr_f), # corridors index
N_corr=length(unique(df$Corridor)), # N corridors
acc_e=df %>%
mutate(acc_E=as.numeric(fct_recode(AE,"Low"="Medium"))) %>%
filter(!is.na(Emig)) %>%
pull(acc_E), # accuracy index E
acc_i=df %>%
mutate(acc_I=as.numeric(fct_recode(AI,"Low"="Medium"))) %>%
filter(!is.na(Immi)) %>%
pull(acc_I), # accuracy index I
XL_e=XL_em,
XL_i=XL_im,
hypv_phi=3.0,
hypv_psi0=3.0,
hypv_psi1=0.1,
hypm_psi1=1.0,
EL=c(16.95790, 44.94987),
EH=c(38.52081, 32.13520),
IL=c(8.066021, 57.490667),
IH=c(20.89134, 44.56385)
)
return(out)
}
foo=data_2_standata(df = mig_data)
foo$X_all
#' Function transforming data frame with data to standata (a list)
#' @param df A data frame with migration data for sending countries, receiving countries, data quality measures and covariates
#' @param sending A vector of ISO2 codes with sending countries to be used in the model (recommended to keep SE and FI)
#' @param receiving A vector of ISO2 codes with receiving countries to be used in the model (recommended to keep SE and FI)
#' @param years A vector of years to be used in the model (2010 to 2019)
#' @return A list to be passed on to the stan model that contains all required inputs
#'
data_2_standata = function(df, sending = c("SE","FI","IT","PL"),
receiving = c("SE","FI","IT","PL"),
years = 2010:2019){
df <- df %>%
filter(Sending_iso2 %in% sending,
Receiving_iso2 %in% receiving,
Year %in% years) %>%
mutate(corr_f=Corridor %>% as.factor() %>% as.numeric(),
orig=Sending %>% as.factor() %>% as.numeric(),
dest=Receiving %>% as.factor() %>% as.numeric())
#data undercounting auxiliary objects
XL_em=df %>%
filter(!is.na(Emig)) %>%
select(Emig,UE) %>%
model.matrix(Emig~UE-1,data=.)
XL_im=df %>%
filter(!is.na(Immi)) %>%
select(Immi,UI) %>%
model.matrix(Immi~UI-1,data=.)
XL_im[,1]=0
out=list(N_mis=df %>%
filter(is.na(Immi)& is.na(Emig)) %>%
pull(Emig) %>%
length(), # N missing E & I
N_obs=df %>%
filter(Year<2020 & (!is.na(Immi) | !is.na(Emig))) %>%
pull(Immi) %>% length(), # N obs E & I
N_all= dim(df)[1], # N all
N_obs1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi) %>% length(), # N obs I
N_mis1=df %>%
pull(Immi) %>% is.na() %>%
sum(), # N missing I
N_obs2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig) %>% length(), # N obs E
N_mis2=df %>%
pull(Emig) %>% is.na() %>%
sum(), # N missing E
N_preds=3, # No. predictors
z1=df %>%
filter(Year<2020, !is.na(Immi)) %>%
pull(Immi), # data I
z2=df %>%
filter(Year<2020, !is.na(Emig)) %>%
pull(Emig), # data E
z_ind1 = df %>%
select(Immi) %>%
is.nna() %>% which(), # index obs I
z_ind2 = df %>%
select(Emig) %>%
is.nna() %>% which(), # index obs E
X_all=df %>%
select(Pop.Sending,
Pop.Receiving,
distw) %>%
log %>%
scale %>%
as.matrix, # predictors matrix
corridor_all=df %>%
pull(corr_f), # corridors index
N_corr=length(unique(df$Corridor)), # N corridors
acc_e=df %>%
mutate(acc_E=as.numeric(fct_recode(AE,"Low"="Medium"))) %>%
filter(!is.na(Emig)) %>%
pull(acc_E), # accuracy index E
acc_i=df %>%
mutate(acc_I=as.numeric(fct_recode(AI,"Low"="Medium"))) %>%
filter(!is.na(Immi)) %>%
pull(acc_I), # accuracy index I
XL_e=XL_em,
XL_i=XL_im,
hypv_phi=3.0,
hypv_psi0=3.0,
hypv_psi1=0.1,
hypm_psi1=1.0,
EL=c(16.95790, 44.94987),
EH=c(38.52081, 32.13520),
IL=c(8.066021, 57.490667),
IH=c(20.89134, 44.56385)
)
return(out)
}
foo=data_2_standata(df = mig_data)
foo$X_all
foo$acc_e
foo$acc_i
fit1=stan(file = "inst/stan/migmod.stan",
data = data_2_standata(df = mig_data),
init = list(inits,inits),
iter = 1000, warmup = 500,
verbose = FALSE, chains=2,thin=1,
control = list(adapt_delta=0.9,max_treedepth=18),
cores = 2,seed=26)
plot(fit1,plotfun="trace",par="beta",inc_warmup=T)
plot(fit1,plotfun="plot",par="beta",inc_warmup=F)
plot(fit1,plotfun="plot",par="lambda1",inc_warmup=F)
plot(fit1,plotfun="plot",par="lambda2",inc_warmup=F)
plot(fit1,plotfun="plot",par="sigma",inc_warmup=F)
plot(fit1,plotfun="plot",par="sigma_y",inc_warmup=F)
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
readLines("~/.Rprofile")
sessionInfo()
.libPaths(c("C:/Rlibs/4.2.1",.libPaths()))
sessionInfo()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
install.packages("../rstanlm", repos = NULL, type = "source")
install.packages("../MigMod", repos = NULL, type = "source")
sessionInfo()
?migmod_estimation
?stan_2_standata
?data_2_standata
getwd()
mtcars
mig_data
?migmod_estimation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
install.packages("../MigMod", repos = NULL, type = "source")
getwd()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
detach(package:MigMod, unload=T)
.libPaths()
library(MigMod,lib.loc = "C:/Rlibs/Test")
fit1=migmod_m(df = mig_data)
library(tidyverse)
fit1=migmod_m(df = mig_data)
roxygen2::roxygenize()
roxygen2::roxygenize()
detach(package:MigMod, unload=T)
install.packages("../MigMod", repos = NULL, type = "source")
install.packages("C:/Users/msassaw5/Dropbox (The University of Manchester)/GitHub/MigMod", repos = NULL, type = "source")
install.packages("C:/Users/msassaw5/Dropbox (The University of Manchester)/GitHub/MigMod", repos = NULL, type = "source", lib = "C:/Rlibs/Test")
